apiVersion: apps/v1beta2
kind: Deployment
metadata:
  labels:
    app: grafana
    usage: monitor
  name: grafana
  namespace: kube-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
      usage: monitor
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: grafana
        usage: monitor
    spec:
      containers:
      - env:
        - name: INFLUXDB_HOST
          value: influxdb
        - name: GF_SERVER_HTTP_PORT
          value: "3000"
        - name: GF_AUTH_BASIC_ENABLED
          value: "false"
        - name: GF_AUTH_ANONYMOUS_ENABLED
          value: "true"
        - name: GF_AUTH_ANONYMOUS_ORG_ROLE
          value: Admin
        - name: GF_SERVER_ROOT_URL
          value: /
        - name: GF_AUTH_ANONYMOUS_ENABLED
          value: "false"
        - name: GF_PATHS_PLUGINS
          value: /var/lib/grafana/plugins
        - name: GF_DATABASE_URL
          valueFrom:
            secretKeyRef:
              key: DB_URL
              name: grafana-db
        - name: GF_DATABASE_SSL_MODE
          valueFrom:
            secretKeyRef:
              key: SSL_MODE
              name: grafana-db
        image: gcr.io/google_containers/heapster-grafana-amd64:v4.4.3
        imagePullPolicy: IfNotPresent
        name: grafana
        ports:
        - containerPort: 3000
          protocol: TCP
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /etc/ssl/certs
          name: ca-certificates
          readOnly: true
        - mountPath: /var/lib/grafana/plugins
          name: grafana-storage
      volumes:
      - hostPath:
          path: /etc/ssl/certs
          type: ""
        name: ca-certificates
      - azureFile:
          secretName: lab-files
          shareName: grafana
        name: grafana-storage
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: grafana
    usage: monitor
  name: grafana
  namespace: kube-system
spec:
  # In a production setup, we recommend accessing Grafana through an external Loadbalancer
  # or through a public IP.
  # type: LoadBalancer
  # You could also use NodePort to expose the service at a randomly-generated port
  # type: NodePort
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 3000
  selector:
    app: grafana
    usage: monitor
